1
Javascript Module Exercises
1. Determine what this Javascript code will print out (without running it):
x = 1;
var a = 5;
var b = 10;
var c = function(a, b, c) {
document.write(x);
document.write(a);
var f = function(a, b, c) {
b = a;
document.write(b);
b = c;
var x = 5;
}
f(a,b,c);
document.write(b);
var x = 10;
 }
c(8,9,10);
document.write(b);
document.write(x);
}
Ans: undefined
8
8
9
10
1

2. Define Global Scope and Local Scope in Javascript.
Ans: Global scope is when a global variable is visible to all the functions and a local scope is when a local 
variable has a limited scope and only exists in the block it is declared in . 

3. Consider the following structure of Javascript code:
// Scope A
function XFunc () {
// Scope B
function YFunc () {
// Scope C
};
};
(a) Do statements in Scope A have access to variables defined in Scope B and C? No
(b) Do statements in Scope B have access to variables defined in Scope A? Yes
(c) Do statements in Scope B have access to variables defined in Scope C? No  
(d) Do statements in Scope C have access to variables defined in Scope A? Yes
(e) Do statements in Scope C have access to variables defined in Scope B? Yes

4. What will be printed by the following (answer without running it)?
var x = 9;
function myFunction() {
return x * x;
}
document.write(myFunction());
x = 5;
document.write(myFunction());
Ans: 81 25 

5.
var foo = 1;
function bar() {
if (!foo) {
var foo = 10;
}
alert(foo);
}
bar();
What will the alert print out? (Answer without running the code. Remember ‘hoisting’.)?
Ans: 
10 because inside bar function the value of foo is undefined. 


6. Consider the following definition of an add( ) function to increment a counter variable:
var add = (function () {
var counter = 0;
return function () {
return counter += 1;
}
 })();
Modify the above module to define a count object with two methods: add( ) and reset( ). The count.add( ) method
adds one to the counter (as above). The count.reset( ) method sets the counter to 0.
Ans: 

var add = (function() {
    var counter = 0;
    var count = {
        add: function() { counter += 1; },
        reset: function() { counter = 0; }
    }
})();

7. In the definition of add( ) shown in question 6, identify the "free" variable. In the context of a function closure,
what is a "free" variable?
Ans: the free variable is 'counter'. In context of a function closure, free variable is a variable referred by the 
inner function which is not one of its parameters or local variables. 


8. The add( ) function defined in question 6 always adds 1 to the counter each time it is called. Write a definition
of a function make_adder(inc), whose return value is an add function with increment value inc (instead of 1). Here
is an example of using this function:
add5 = make_adder(5);
add5( ); add5( ); add5( ); // final counter value is 15
add7 = make_adder(7);
add7( ); add7( ); add7( ); // final counter value is 21
Ans: 
function make_adder(a) {
    var counter = 0;
    return function() {
        counter += a;
        return counter;
    }
}

var add5 = make_adder(5);
add5();
add5();
console.log(add5()); // final counter value is 15

var add7 = make_adder(7);
add7();
add7();
console.log(add7()); // final counter value is 21

9. Suppose you are given a file of Javascript code containing a list of many function and variable declarations. All of
these function and variable names will be added to the Global Javascript namespace. What simple modification to
the Javascript file can remove all the names from the Global namespace?
Ans: 
we can adopt the module pattern to remove all the names from the global namespace.
(function(){
    // the original code
})(); 

10. Using the Revealing Module Pattern, write a Javascript definition of a Module that creates an Employee Object
with the following fields and methods:
Private Field: name
Private Field: age
Private Field: salary
Public Method: setAge(newAge)
Public Method: setSalary(newSalary)
Public Method: setName(newName)
Private Method: getAge( )
Private Method: getSalary( )
Private Method: getName( )
Public Method: increaseSalary(percentage) // uses private getSalary( )
Public Method: incrementAge( ) // uses private getAge( )
Ans: 
var employee = (function() {
    var name;
    var age;
    var salary;
    var getAge = function() {
        return age;
    }
    var getSalary = function() {
        return salary;
    }

    var getName = function() {
        return name;
    }

    var setAge = function(newAge) {
        age = newAge;
    }
    var setSalary = function(newSalary) {
        salary = newSalary;
    }
    var setName = function(newName) {
        name = newName;
    }

    var incrementAge = function() {
        age = getAge() + 1;
        return age;
    }

    var incrementSalary = function(percentage) {
        salary = getSalary() * percentage / 100 + getSalary();
        return salary;
    }
    return {
        setAge: setAge,
        setSalary: setSalary,
        setName: setName,
        incrementAge: incrementAge,
        incrementSalary: incrementSalary
    }
})();

employee.setAge(25);
employee.setName("Shyam");
employee.setSalary(30000);
console.log(employee.incrementAge());
console.log(employee.incrementSalary(1))

11. Rewrite your answer to Question 10 using the Anonymous Object Literal Return Pattern.
Ans: 
var employee = (function() {
    var name;
    var age;
    var salary;
    var getAge = function() {
        return age;
    }
    var getSalary = function() {
        return salary;
    }

    var getName = function() {
        return name;
    }

    return {
        setAge: function(newAge) {
            age = newAge;
        },
        setSalary: function(newSalary) {
            salary = newSalary;
        },
        setName: function(newName) {
            name = newName;
        },
        incrementAge: function() {
            age = getAge() + 1;
            return age;
        },
        incrementSalary: function(percentage) {
            salary = getSalary() * percentage / 100 + getSalary();
            return salary;
        }
    }
})();

employee.setAge(25);
employee.setName("Shyam");
employee.setSalary(30000);
console.log(employee.incrementAge());
console.log(employee.incrementSalary(1));


12. Rewrite your answer to Question 10 using the Locally Scoped Object Literal Pattern.
Ans: 
var employee = (function() {
    var name;
    var age;
    var salary;
    var getAge = function() {
        return age;
    }
    var getSalary = function() {
        return salary;
    }

    var getName = function() {
        return name;
    }
    var myObject = new Object();
    myObject.setAge = function(newAge) {
        age = newAge;
    };
    myObject.setSalary = function(newSalary) {
        salary = newSalary;
    };
    myObject.setName = function(newName) {
        name = newName;
    };
    myObject.incrementAge = function() {
        age = getAge() + 1;
        return age;
    };
    myObject.incrementSalary = function(percentage) {
        salary = getSalary() * percentage / 100 + getSalary();
        return salary;
    };
    return myObject;
})();

employee.setAge(25);
employee.setName("Shyam");
employee.setSalary(30000);
console.log(employee.incrementAge());
console.log(employee.incrementSalary(1));

13. Write a few Javascript instructions to extend the Module of Question 10 to have a public address field and
public methods setAddress(newAddress) and getAddress( ).
Ans: 
employee.address = "";
employee.getAddress = function() {
    return address;
}
employee.setAddress = function(newAddress) {
    address = newAddress;
}

14. What is the output of the following code?
const promise = new Promise((resolve, reject) => {
reject(“Hattori”);
});
promise.then(val => alert(“Success: “ + val))
 .catch(e => alert(“Error: “ + e));
 Ans: 
Error: Hattori

15. What is the output of the following code?
const promise = new Promise((resolve, reject) => {
resolve(“Hattori”);
setTimeout(()=> reject(“Yoshi”), 500);
});
promise.then(val => alert(“Success: “ + val))
 .catch(e => alert(“Error: “ + e));
Ans: 
Success: Hattori

16. What is the output of the following code?
function job(state) {
 return new Promise(function(resolve, reject) {
 if (state) {
 resolve('success');
 } else {
 reject('error');
 }
 });
}
let promise = job(true);
promise.then(function(data) {
 console.log(data);
 return job(false);})
 .catch(function(error) {
 console.log(error);
 return 'Error caught';
});
Ans: 
success
error
